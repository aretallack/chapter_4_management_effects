---
title: "Analysis of MODIS EVI"
format: html
---

This is the first processing step necessary for this research. Raw MODIS vegetation products (FC or EVI) are taken and processed to the desired regions for the study. The script...

Takes input rasters - monthly fractional cover and 
- reprojects / crops to match the study area, 
- writes processed rasters to output/rasters

```{r}
#| label: setup
pacman::p_load(tidyverse, terra, sf) 
studyExtent <- read_sf("./outputs/vector/study_area.gpkg") %>% st_geometry()
# Study extent reprojected to modis sinusoidal
studyExtent_modsin <- studyExtent %>% st_transform("+proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs")
```

# Import Fractional Cover

```{r Import Raster data}
dataPath <- "E:/data/Landscape_Products/Vegetation_Products/GuerschmanFC/Monthly" %>% 
  list.files("*.nc", full.names = T)
outputPath <- file.path("./outputs/raster/guerschman_fc_monthly")
 
####################
### Read rasters ###
####################

# Data paths for MODIS vertical grid cell 11 and 12
dataPath_v11 <- dataPath[which(str_detect(dataPath, "v11"))]
dataPath_v12 <- dataPath[which(str_detect(dataPath, "v12"))]

### V11 ###
# Load vertical column 11 rasters
# for pv, npv and bare

pv_v11 <- rast(dataPath_v11) %>%
  .[[which(str_detect(names(.), "^phot"))]]

npv_v11 <- rast(dataPath_v11) %>%
  .[[which(str_detect(names(.), "^nphot"))]]

bare_v11 <- rast(dataPath_v11) %>%
  .[[which(str_detect(names(.), "^bare"))]]

### V12 ###
# Load vertical column 12 rasters
# for pv, npv and bare

pv_v12 <- rast(dataPath_v12) %>%
  .[[which(str_detect(names(.), "^phot"))]]

npv_v12 <- rast(dataPath_v12) %>%
  .[[which(str_detect(names(.), "^nphot"))]]

bare_v12 <- rast(dataPath_v12) %>%
  .[[which(str_detect(names(.), "^bare"))]]


# Merge v11 and v12 rasters
pv <- terra::merge(pv_v11, pv_v12)
npv <- terra::merge(npv_v11, npv_v12)
bare <- terra::merge(bare_v11, bare_v12)

# Remove unnessecary objects
rm(list = c("pv_v11", "npv_v11", "bare_v11","pv_v12", "npv_v12", "bare_v12"))


# Function to crop rasters to the study area and reproject to
# GDA94 MGA zone 53
reproject_crop <- function(x) {
  out <- x %>%
    crop(ext(vect(st_buffer(studyExtent_modsin, 10000)))) %>%
    project("EPSG: 28353") %>%
    crop(studyExtent %>% st_buffer(5000))
  
  return(out)
}

# Apply above function to each cover component
pv <- reproject_crop(pv)
npv <- reproject_crop(npv)
bare <- reproject_crop(bare)
```

## Rename rasters

```{r}
# Function to create output files names from image times and cover type
rast_names <- function(x) {
  month <- lubridate::month(time(x))
  year <- lubridate::year(time(x))
  cover_type <- deparse(substitute(x)) %>% stringr::str_to_upper()
  names <- paste0(cover_type, "_Monthly_Medoid.v310.MCD43A4.h29v11.", year ,".", month, ".006.tif" )
  }

names(pv) <- rast_names(pv)
names(npv) <- rast_names(npv)
names(bare) <- rast_names(bare)
```

# Write rasters

Save processed rasters as .tif

```{r, eval = FALSE}
start_date <- time(pv)[1] %>% 
  str_replace_all("-", "")
end_date <- time(pv)[length(time(pv))] %>% 
  str_replace_all("-", "")

writeCDF(pv, file.path(outputPath, paste0("fc_monthly_pv_", start_date, "_", end_date, ".nc")), varname = "guerschman_monthly_pv", compression = 6, overwrite = T)
writeCDF(npv, file.path(outputPath, paste0("fc_monthly_npv_", start_date, "_", end_date, ".nc")), varname = "guerschman_monthly_npv", compression = 6, overwrite = T)
writeCDF(bare, file.path(outputPath, paste0("fc_monthly_bare_", start_date, "_", end_date, ".nc")), varname = "guerschman_monthly_bare", compression = 6, overwrite = T)
```
