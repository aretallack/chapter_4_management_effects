---
title: "test"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
pacman::p_load(tidyverse, plyr, tidyterra, sf, terra, mblm, ggpubr)

raster <- rast(list.files("./outputs/raster/guerschman_fc_monthly", "*.nc$", full.names = T))
study_area <- read_sf("./outputs/vector/bonbon_buffer.gpkg") %>% 
  st_geometry()

pv <- raster[[str_detect(names(raster), "_pv*")]]
npv <- raster[[str_detect(names(raster), "_npv*")]]
bare <- raster[[str_detect(names(raster), "_bare*")]]
```


```{r}
calc_slopes <- function(x, percentile){
  
  # x <- x %>% 
  #   roll(12, median)

  roll_5th <- x %>% 
    roll(12, \(x) quantile(x, percentile, na.rm = T))
  
  df <- roll_5th %>% 
    as.data.frame(cells = T, xy = T) %>% 
    pivot_longer(-c(1:3))
  
  # Function for linear regression.
  # Applied to each cell later
  get_slope <- function(x) {
    # lm(value ~  seq_len(length(x)), x) %>% 
    #             .$coefficient %>% 
    #             .[2] %>% return()

  v <-  x %>%
    .$value
  t <- seq_len(length(v))
  
  suppressWarnings(mblm(v ~ t, repeated = T)) %>%
    summary() %>% 
    .$coefficients %>% 
    .[2,1] %>% return()
  }

  split_df <- df %>% 
    group_by(cell) %>% 
    group_split() %>%
    as.list()
  #################
  ### clean NAs ###
  #################
  # Find cells that have NA values at some point in timeseries
  # remove from split df and full df
  have_na <- split_df %>% lapply(\(x) x$value %>% is.na() %>% sum()) %>% unlist %>% {which(. > 0)}
  na_cells <- df$cell %>% unique() %>% .[have_na]
  split_df <- split_df[-have_na]
  df <- df[-which(df$cell %in% na_cells),]
  
  #####################
  ### start cluster ###
  cl <- parallel::makeCluster(parallel::detectCores())
  parallel::clusterExport(cl, c("get_slope"))
  parallel::clusterCall(cl, function() library(tidyverse))
  parallel::clusterCall(cl, function() library(mblm))
  ####################
  
  # Get slopes for each cell and add to dataframe
  slopes <- parallel::parLapply(cl, X = split_df, get_slope) %>% 
    # lapply(get_slope) %>% 
    unlist() %>% 
    as.vector() %>% 
    tibble(cell = df$cell %>% unique(),
           slope = .) %>% 
    {merge(df[1:3] %>% filter(!duplicated(cell)), ., by = "cell")}
  
  ####################
  ### stop cluster ###
  parallel::stopCluster(cl)
  ####################
  
  # Convert df to raster
  out_rast <- slopes %>% 
    .[,-1] %>%
    tidyterra::as_spatraster(crs = "epsg:28353")
  
  return(out_rast)
}


if (!file.exists("./outputs/raster/pv_slope.tif")) {
  pv_slope <- calc_slopes(pv, 0.05)
  writeRaster(pv_slope, "./outputs/raster/pv_slope.tif", overwrite = T)
} else {
  pv_slope <- rast("./outputs/raster/pv_slope.tif")
}

if (!file.exists("./outputs/raster/npv_slope.tif")) {
  npv_slope <- calc_slopes(npv, 0.05)
  writeRaster(npv_slope, "./outputs/raster/npv_slope.tif", overwrite = T)  
} else {
  npv_slope <- rast("./outputs/raster/npv_slope.tif")
}

if (!file.exists("./outputs/raster/bare_slope.tif")) {
  bare_slope <- calc_slopes(bare, 0.95)
  writeRaster(bare_slope, "./outputs/raster/bare_slope.tif", overwrite = T)
} else {
  bare_slope <- rast("./outputs/raster/bare_slope.tif")
}

```

# Plot Rasters

```{r}
pv_slope <- pv_slope %>% 
  mask(vect(study_area)) %>% 
  crop(vect(study_area))
names(pv_slope) <- "PV (5th) Trend\n(2001 - 2023)"
npv_slope <- npv_slope %>% 
  mask(vect(study_area)) %>% 
  crop(vect(study_area))
names(npv_slope) <- "NPV (5th) Trend\n(2001 - 2023)"
bare_slope <- bare_slope %>% 
  mask(vect(study_area)) %>% 
  crop(vect(study_area))
names(bare_slope) <- "Bare (95th) Trend\n(2001 - 2023)"


# slope_rasts <- c(stretch(pv_slope, minv = -0.1, maxq = 0.995, histeq = T), 
#                  stretch(npv_slope, minq = 0.005, maxq = 0.995, histeq = T), 
#                  stretch(bare_slope, minq = 0.005, maxq = 0.995, histeq = T))

pal <- RColorBrewer::brewer.pal(11, "PiYG")

plot_slope <- function(x){
  lims <- x %>% 
    as.vector() %>% 
    .[-which(is.na(.))] %>% 
    quantile(c(0.005, 0.995)) %>% 
    as.vector()
  
  x[x < lims[1]] <- lims[1]
  x[x > lims[2]] <- lims[2]
  
  centred_lims <- lims %>% 
    abs() %>% 
    .[which(. %in% max(.))] %>% 
    {c(round_any((.*-1), 0.01, floor), round_any(., 0.01, ceiling))}
    
  ggplot() +
    geom_spatraster(data = x) +
    geom_sf(data = st_buffer(study_area[1], 500), fill = "transparent", linewidth = 1.5) +
    geom_sf(data = study_area, fill = "transparent", linewidth = 1.5, colour = c("#FFFF73", "#73B2FF")) +
    
    scale_fill_whitebox_c(
      palette = "purple",
      limits = centred_lims,
      breaks = c(centred_lims[1], 0, centred_lims[2]),
      labels = c("Cover Component                                     \nReducing                     ", "", "                                   Cover Component\n                      Increasing"),
      guide = guide_colorbar(
        title.position = "top",
        title.hjust = 1
        )
      ) +
    
    labs(fill = "Cover Trend\n(2021 - 2023)",
         title = names(x)) +
    
    theme_classic() +
    
    theme(legend.position = c(0.5, -0.2),
          legend.title = element_blank(),
          legend.text = element_text(vjust = 2.45, face = "bold"),
          legend.background = element_rect(fill = "transparent"),
          plot.title = element_text(
            hjust = 0.5,
            vjust = -2,
            face = "bold",
            size = unit(10, "cm")
            ),
          axis.line = element_blank(),
          axis.text = element_blank(),
          axis.ticks = element_blank()
          )
}

pv_slope_plot <- plot_slope(pv_slope) +
  theme(plot.margin = unit(c(0, -2, -0.5, 0), "cm"))
npv_slope_plot <- plot_slope(npv_slope) +
  theme(plot.margin = unit(c(0, -2, -0.5, -2), "cm"))
bare_slope_plot <- plot_slope(bare_slope) +
  theme(plot.margin = unit(c(0, 0, -0.5, -2), "cm"))

ggarrange(pv_slope_plot,
          npv_slope_plot,
          bare_slope_plot,
          ncol = 3,
          common.legend = T,
          legend = "bottom") +
  theme(plot.margin = margin(0,-1,-1,-1, "cm"))

ggsave("./figures/spatial_trends.png",
       width = 16,
       height = 10,
       units = "cm")
```



